# https://docs.datadoghq.com/integrations/amazon_web_services/?tab=roledelegation#aws-integration-iam-policy
# https://datadog-cloudformation-template.s3.amazonaws.com/aws/datadog_integration_role.yaml

data "aws_iam_policy_document" "full_integration" {
  count = local.enabled ? 1 : 0

  statement {
    sid    = "DatadogFullIntegration"
    effect = "Allow"

    actions = [
      "account:GetAccountInformation",
      "account:GetContactInformation",
      "airflow:GetEnvironment",
      "airflow:ListEnvironments",
      "amplify:List*",
      "aoss:BatchGetCollection",
      "aoss:ListCollections",
      "apigateway:GET",
      "appstream:Describe*",
      "aps:DescribeRuleGroupsNamespace",
      "aps:DescribeScraper",
      "aps:DescribeWorkspace",
      "aps:ListRuleGroupsNamespaces",
      "aps:ListScrapers",
      "aps:ListWorkspaces",
      "autoscaling:Describe*",
      "backup:List*",
      "batch:DescribeJobQueues",
      "batch:DescribeSchedulingPolicies",
      "batch:ListSchedulingPolicies",
      "bcm-data-exports:GetExport",
      "bcm-data-exports:ListExports",
      "bedrock:Get*",
      "bedrock:List*",
      "budgets:ViewBudget",
      "cassandra:Select",
      "cloudfront:GetDistributionConfig",
      "cloudfront:ListDistributions",
      "cloudhsm:DescribeBackups",
      "cloudhsm:DescribeClusters",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetTrail",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:ListTrails",
      "cloudtrail:LookupEvents",
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "codeartifact:DescribeDomain",
      "codeartifact:DescribePackageGroup",
      "codeartifact:DescribeRepository",
      "codeartifact:ListDomains",
      "codeartifact:ListPackageGroups",
      "codeartifact:ListPackages",
      "codedeploy:BatchGet*",
      "codedeploy:List*",
      "codepipeline:ListWebhooks",
      "connect:Describe*",
      "connect:List*",
      "controltower:GetLandingZone",
      "controltower:ListEnabledBaselines",
      "controltower:ListEnabledControls",
      "controltower:ListLandingZones",
      "cur:DescribeReportDefinitions",
      "datazone:GetDomain",
      "datazone:ListDomains",
      "deadline:GetBudget",
      "deadline:GetLicenseEndpoint",
      "deadline:GetQueue",
      "deadline:List*",
      "directconnect:Describe*",
      "dlm:GetLifecyclePolicies",
      "dlm:GetLifecyclePolicy",
      "docdb-elastic:GetCluster",
      "docdb-elastic:GetClusterSnapshot",
      "docdb-elastic:ListClusterSnapshots",
      "drs:Describe*",
      "dsql:GetCluster",
      "dsql:ListClusters",
      "dynamodb:Describe*",
      "dynamodb:List*",
      "ec2:Describe*",
      "ec2:Get*",
      "ecs:Describe*",
      "ecs:List*",
      "eks:Describe*",
      "eks:List*",
      "elasticache:Describe*",
      "elasticache:List*",
      "elasticfilesystem:DescribeAccessPoints",
      "elasticfilesystem:DescribeFileSystems",
      "elasticfilesystem:DescribeTags",
      "elasticloadbalancing:Describe*",
      "elasticmapreduce:Describe*",
      "elasticmapreduce:List*",
      "emr-containers:ListManagedEndpoints",
      "emr-containers:ListSecurityConfigurations",
      "emr-containers:ListVirtualClusters",
      "es:DescribeElasticsearchDomains",
      "es:ListDomainNames",
      "es:ListTags",
      "events:CreateEventBus",
      "fsx:DescribeFileSystems",
      "fsx:ListTagsForResource",
      "glacier:GetVaultNotifications",
      "glue:ListRegistries",
      "grafana:DescribeWorkspace",
      "greengrass:Get*",
      "health:DescribeAffectedEntities",
      "health:DescribeEventDetails",
      "health:DescribeEvents",
      "iam:ListAccountAliases",
      "imagebuilder:Get*",
      "imagebuilder:List*",
      "iotsitewise:Describe*",
      "iotsitewise:List*",
      "iottwinmaker:Get*",
      "iottwinmaker:ListComponentTypes",
      "iottwinmaker:ListEntities",
      "iottwinmaker:ListScenes",
      "iotwireless:Get*",
      "iotwireless:List*",
      "ivs:GetChannel",
      "ivs:GetRecordingConfiguration",
      "ivs:List*",
      "ivschat:GetLoggingConfiguration",
      "ivschat:GetRoom",
      "ivschat:ListLoggingConfigurations",
      "ivschat:ListRooms",
      "kinesis:Describe*",
      "kinesis:List*",
      "lambda:GetFunction",
      "lambda:List*",
      "launchwizard:GetDeployment",
      "launchwizard:ListDeployments",
      "lightsail:GetInstancePortStates",
      "logs:DeleteSubscriptionFilter",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:DescribeSubscriptionFilters",
      "logs:FilterLogEvents",
      "logs:PutSubscriptionFilter",
      "logs:TestMetricFilter",
      "macie2:GetAllowList",
      "macie2:GetCustomDataIdentifier",
      "macie2:GetMacieSession",
      "macie2:ListAllowLists",
      "macie2:ListCustomDataIdentifiers",
      "macie2:ListMembers",
      "managedblockchain:Get*",
      "managedblockchain:List*",
      "memorydb:Describe*",
      "mobiletargeting:Get*",
      "mobiletargeting:ListJourneys",
      "mobiletargeting:ListTemplates",
      "networkmanager:Get*",
      "networkmanager:List*",
      "oam:ListAttachedLinks",
      "oam:ListSinks",
      "organizations:Describe*",
      "organizations:List*",
      "osis:GetPipeline",
      "osis:GetPipelineBlueprint",
      "osis:ListPipelineBlueprints",
      "osis:ListPipelines",
      "pca-connector-ad:ListConnectors",
      "pca-connector-ad:ListDirectoryRegistrations",
      "pca-connector-ad:ListTemplates",
      "pca-connector-scep:ListConnectors",
      "pipes:ListPipes",
      "proton:Get*",
      "proton:List*",
      "qbusiness:Get*",
      "qbusiness:ListDataAccessors",
      "qldb:ListJournalKinesisStreamsForLedger",
      "ram:GetResourceShareInvitations",
      "rbin:GetRule",
      "rbin:ListRules",
      "rds:Describe*",
      "rds:List*",
      "redshift-serverless:List*",
      "redshift:DescribeClusters",
      "redshift:DescribeLoggingStatus",
      "resiliencehub:DescribeApp",
      "resiliencehub:DescribeAppAssessment",
      "resiliencehub:List*",
      "resource-explorer-2:GetIndex",
      "resource-explorer-2:GetManagedView",
      "resource-explorer-2:GetView",
      "resource-explorer-2:ListManagedViews",
      "resource-explorer-2:ListViews",
      "resource-groups:GetGroup",
      "resource-groups:ListGroups",
      "route53:List*",
      "rum:GetAppMonitor",
      "rum:ListAppMonitors",
      "s3-outposts:ListRegionalBuckets",
      "s3:Get*",
      "s3:ListAllMyBuckets",
      "s3:PutBucketNotification",
      "savingsplans:DescribeSavingsPlanRates",
      "savingsplans:DescribeSavingsPlans",
      "scheduler:GetSchedule",
      "scheduler:ListScheduleGroups",
      "scheduler:ListSchedules",
      "ses:Get*",
      "ses:List*",
      "signer:GetSigningProfile",
      "signer:ListSigningProfiles",
      "sms-voice:Describe*",
      "sns:GetSubscriptionAttributes",
      "sns:List*",
      "sns:Publish",
      "social-messaging:GetLinkedWhatsAppBusinessAccount",
      "social-messaging:ListLinkedWhatsAppBusinessAccounts",
      "sqs:ListQueues",
      "ssm:GetServiceSetting",
      "ssm:ListCommands",
      "states:DescribeStateMachine",
      "states:ListStateMachines",
      "support:DescribeTrustedAdvisor*",
      "support:RefreshTrustedAdvisorCheck",
      "tag:GetResources",
      "tag:GetTagKeys",
      "tag:GetTagValues",
      "timestream:DescribeEndpoints",
      "timestream:ListTables",
      "waf-regional:GetRule",
      "waf-regional:GetRuleGroup",
      "waf-regional:ListRuleGroups",
      "waf-regional:ListRules",
      "waf:GetRule",
      "waf:GetRuleGroup",
      "waf:ListRuleGroups",
      "waf:ListRules",
      "wafv2:GetIPSet",
      "wafv2:GetRegexPatternSet",
      "wafv2:GetRuleGroup",
      "wafv2:ListLoggingConfigurations",
      "workmail:DescribeOrganization",
      "workmail:ListOrganizations",
      "xray:BatchGetTraces",
      "xray:GetTraceSummaries"
    ]

    resources = ["*"]
  }
}

module "full_integration_label" {
  source  = "cloudposse/label/null"
  version = "0.25.0"

  attributes = compact(concat(module.this.attributes, ["full_integration"]))

  context = module.this.context
}

locals {
  full_integration_count = local.enabled && (
    contains(split(",", lower(join(",", local.policies))), "full-integration") ||
    # Backwards compatibility for the integrations variable
    contains(split(",", lower(join(",", local.policies))), "all") ||
    contains(split(",", lower(join(",", local.policies))), "everything")
  ) ? 1 : 0
}

resource "aws_iam_policy" "full_integration" {
  count  = local.full_integration_count
  name   = module.full_integration_label.id
  policy = join("", data.aws_iam_policy_document.full_integration[*].json)
  path   = var.policy_path
  tags   = module.full_integration_label.tags
}

resource "aws_iam_role_policy_attachment" "full_integration" {
  count      = local.full_integration_count
  role       = join("", aws_iam_role.default[*].name)
  policy_arn = join("", aws_iam_policy.full_integration[*].arn)
}
