# https://docs.datadoghq.com/integrations/amazon_web_services/?tab=roledelegation#datadog-aws-iam-policy

data "aws_iam_policy_document" "all" {
  count = local.enabled ? 1 : 0

  statement {
    sid    = "DatadogAll"
    effect = "Allow"

    actions = [
      "access-analyzer:GetAnalyzer",
      "access-analyzer:GetFinding",
      "access-analyzer:ListAnalyzers",
      "access-analyzer:ListFindings",
      "acm:ListCertificates",
      "apigateway:GET",
      "application-autoscaling:DescribeScalingActivities",
      "application-autoscaling:DescribeScalingPolicies",
      "appsync:ListGraphqlApis",
      "athena:GetWorkGroup",
      "athena:ListWorkGroups",
      "autoscaling:Describe*",
      "backup:List*",
      "budgets:ViewBudget",
      "cassandra:Select",
      "cloudformation:DescribeStacks",
      "cloudformation:ListStacks",
      "cloudfront:GetDistribution",
      "cloudfront:GetDistributionConfig",
      "cloudfront:ListDistributions",
      "cloudfront:ListFunctions",
      "cloudfront:ListKeyGroups",
      "cloudfront:ListOriginAccessControls",
      "cloudfront:ListPublicKeys",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetEventSelectors",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:LookupEvents",
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*",
      "codebuild:BatchGetProjects",
      "codebuild:ListProjects",
      "codedeploy:BatchGet*",
      "codedeploy:List*",
      "codepipeline:ListPipelines",
      "cognito-identity:DescribeIdentityPool",
      "cognito-identity:GetIdentityPoolRoles",
      "cognito-identity:ListIdentityPools",
      "cognito-idp:DescribeUserPool",
      "cognito-idp:ListIdentityProviders",
      "cognito-idp:ListUserPools",
      "config:DescribeConfigurationRecorderStatus",
      "config:DescribeConfigurationRecorders",
      "dax:DescribeClusters",
      "directconnect:Describe*",
      "dms:DescribeEndpoints",
      "dms:DescribeReplicationInstances",
      "dms:DescribeReplicationTasks",
      "dynamodb:Describe*",
      "dynamodb:List*",
      "ec2:Describe*",
      "ec2:GetEbsEncryptionByDefault",
      "ec2:GetImageBlockPublicAccessState",
      "ec2:GetManagedPrefixListEntries",
      "ec2:GetSnapshotBlockPublicAccessState",
      "ec2:GetTransitGatewayPrefixListReferences",
      "ec2:SearchTransitGatewayRoutes",
      "ecr-public:DescribeRegistries",
      "ecr-public:DescribeRepositories",
      "ecr:DescribeRegistry",
      "ecr:DescribeRepositories",
      "ecr:GetRegistryPolicy",
      "ecs:Describe*",
      "ecs:List*",
      "eks:DescribeCluster",
      "eks:DescribeNodegroup",
      "eks:ListClusters",
      "eks:ListNodegroups",
      "elasticache:Describe*",
      "elasticache:List*",
      "elasticfilesystem:DescribeAccessPoints",
      "elasticfilesystem:DescribeFileSystems",
      "elasticfilesystem:DescribeTags",
      "elasticloadbalancing:Describe*",
      "elasticmapreduce:Describe*",
      "elasticmapreduce:List*",
      "es:DescribeElasticsearchDomain",
      "es:DescribeElasticsearchDomains",
      "es:ListDomainNames",
      "es:ListTags",
      "events:CreateEventBus",
      "events:ListEventBuses",
      "events:ListRules",
      "events:ListTargetsByRule",
      "fsx:DescribeBackups",
      "fsx:DescribeFileSystems",
      "fsx:ListTagsForResource",
      "glacier:GetVaultNotifications",
      "glacier:ListVaults",
      "globalaccelerator:ListAccelerators",
      "glue:ListRegistries",
      "health:DescribeAffectedEntities",
      "health:DescribeEventDetails",
      "health:DescribeEvents",
      "iam:GenerateCredentialReport",
      "iam:GetAccountAuthorizationDetails",
      "iam:GetAccountPasswordPolicy",
      "iam:GetAccountSummary",
      "iam:GetLoginProfile",
      "iam:ListAttachedRolePolicies",
      "iam:ListGroups",
      "iam:ListInstanceProfiles",
      "iam:ListPolicies",
      "iam:ListServerCertificates",
      "iam:ListVirtualMFADevices",
      "inspector2:ListCoverage",
      "kafka:ListClustersV2",
      "kinesis:Describe*",
      "kinesis:List*",
      "kms:GetKeyRotationStatus",
      "kms:ListAliases",
      "kms:ListKeys",
      "lambda:GetPolicy",
      "lambda:List*",
      "lightsail:GetInstancePortStates",
      "lightsail:GetInstances",
      "logs:DeleteSubscriptionFilter",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:DescribeMetricFilters",
      "logs:DescribeSubscriptionFilters",
      "logs:FilterLogEvents",
      "logs:PutSubscriptionFilter",
      "logs:TestMetricFilter",
      "mq:DescribeBroker",
      "mq:DescribeConfigurationRevision",
      "mq:DescribeUser",
      "mq:ListBrokers",
      "mq:ListConfigurationRevisions",
      "mq:ListConfigurations",
      "network-firewall:ListFirewalls",
      "network-firewall:ListRuleGroups",
      "organizations:Describe*",
      "organizations:List*",
      "rds:Describe*",
      "rds:List*",
      "redshift:DescribeClusterParameterGroups",
      "redshift:DescribeClusterParameters",
      "redshift:DescribeClusterSecurityGroups",
      "redshift:DescribeClusterSnapshots",
      "redshift:DescribeClusterSubnetGroups",
      "redshift:DescribeClusters",
      "redshift:DescribeEndpointAccess",
      "redshift:DescribeEventSubscriptions",
      "redshift:DescribeLoggingStatus",
      "route53:GetDNSSEC",
      "route53:GetHostedZone",
      "route53:List*",
      "route53domains:ListDomains",
      "s3:GetAccountPublicAccessBlock",
      "s3:GetBucketAcl",
      "s3:GetBucketEncryption",
      "s3:GetBucketLocation",
      "s3:GetBucketLogging",
      "s3:GetBucketNotification",
      "s3:GetBucketPolicyStatus",
      "s3:GetBucketTagging",
      "s3:GetBucketVersioning",
      "s3:GetBucketWebsite",
      "s3:ListAccessGrants",
      "s3:ListAccessPoints",
      "s3:ListAllMyBuckets",
      "s3:PutBucketNotification",
      "sagemaker:DescribeNotebookInstance",
      "sagemaker:ListNotebookInstances",
      "savingsplans:DescribeSavingsPlanRates",
      "savingsplans:DescribeSavingsPlans",
      "secretsmanager:DescribeSecret",
      "secretsmanager:ListSecrets",
      "securityhub:DescribeHub",
      "ses:Get*",
      "ses:ListIdentities",
      "sns:GetTopicAttributes",
      "sns:List*",
      "sns:Publish",
      "sqs:ListQueues",
      "ssm:DescribeDocument",
      "ssm:DescribeInstanceInformation",
      "ssm:GetServiceSetting",
      "ssm:ListComplianceItems",
      "ssm:ListDocuments",
      "states:DescribeStateMachine",
      "states:ListStateMachines",
      "support:DescribeTrustedAdvisor*",
      "support:RefreshTrustedAdvisorCheck",
      "tag:GetResources",
      "tag:GetTagKeys",
      "tag:GetTagValues",
      "timestream:DescribeEndpoints",
      "waf-regional:ListRuleGroups",
      "waf-regional:ListRules",
      "waf-regional:ListWebACLs",
      "waf:ListRuleGroups",
      "waf:ListRules",
      "waf:ListWebACLs",
      "wafv2:GetIPSet",
      "wafv2:GetRegexPatternSet",
      "wafv2:GetRuleGroup",
      "wafv2:GetWebACL",
      "wafv2:ListIPSets",
      "wafv2:ListRegexPatternSets",
      "wafv2:ListRuleGroups",
      "wafv2:ListWebACLs",
      "xray:BatchGetTraces",
      "xray:GetTraceSummaries"
    ]

    resources = ["*"]
  }
}

module "all_label" {
  source  = "cloudposse/label/null"
  version = "0.25.0"

  attributes = compact(concat(module.this.attributes, ["all"]))

  context = module.this.context
}

locals {
  all_count = local.enabled && contains(split(",", lower(join(",", var.integrations))), "all") ? 1 : 0
}

resource "aws_iam_policy" "all" {
  count  = local.all_count
  name   = module.all_label.id
  policy = join("", data.aws_iam_policy_document.all.*.json)
  tags   = module.all_label.tags
}

resource "aws_iam_role_policy_attachment" "all" {
  count      = local.all_count
  role       = join("", aws_iam_role.default.*.name)
  policy_arn = join("", aws_iam_policy.all.*.arn)
}
